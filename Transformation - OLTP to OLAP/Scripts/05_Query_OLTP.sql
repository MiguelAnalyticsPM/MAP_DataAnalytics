-- Queries for OLTP System
USE db_oltp
GO
-- 1. Customer Queries
-- List all customers with their basic information
SELECT Customer_ID, Credit, Mail
FROM dbo.Customer;
GO

-- Customers with credit greater than a specific value
SELECT Customer_ID, Credit, Mail
FROM dbo.Customer
WHERE Credit > 2000;
GO

-- 2. Product Queries
-- List all available products
SELECT Product_ID, description, Quantity, UP, Stock, Active
FROM dbo.Product;
GO

-- Products with low stock (less than 10 units)
SELECT Product_ID, description, Stock
FROM dbo.Product
WHERE Stock < 10;
GO

-- Inactive products
SELECT Product_ID, description, Stock
FROM dbo.Product
WHERE Active = 0;

-- 3. Invoice Queries
-- List all invoices with basic details
SELECT Invoice_NO, Cod_sales, Customer_ID, Delivery_ID, Date, Tax, ShipTo
FROM dbo.hb_invoice;

-- Invoices issued within a specific date range
SELECT Invoice_NO, Cod_sales, Customer_ID, Date, Tax
FROM dbo.hb_invoice
WHERE Date BETWEEN '2024-07-01' AND '2024-07-31';

-- Total taxes generated from all invoices
SELECT SUM(Tax) AS TotalTax
FROM dbo.hb_invoice;

-- 4. Invoice Details Queries
-- List all invoice details
SELECT Invoice_NO, Product_ID, Quantity, UP, Descount
FROM dbo.Det_invoice;

-- Products sold with discounts applied
SELECT Invoice_NO, Product_ID, Quantity, UP, Descount
FROM dbo.Det_invoice
WHERE Descount > 0;

-- Total revenue generated by sold products
SELECT Product_ID, SUM(Quantity * UP) AS TotalRevenue
FROM dbo.Det_invoice
GROUP BY Product_ID;

-- 5. Combined Queries (Relationships Between Tables)
-- Information about invoices along with customers and products
SELECT hb.Invoice_NO, c.Customer_ID, c.Mail, p.Product_ID, p.description, di.Quantity, di.UP
FROM dbo.hb_invoice hb
INNER JOIN dbo.Customer c ON hb.Customer_ID = c.Customer_ID
INNER JOIN dbo.Det_invoice di ON hb.Invoice_NO = di.Invoice_NO
INNER JOIN dbo.Product p ON di.Product_ID = p.Product_ID;

-- Salespersons and their total sales
SELECT sp.Cod_sales, sp.Salary, COUNT(hb.Invoice_NO) AS TotalSales
FROM dbo.SalesPerson sp
INNER JOIN dbo.hb_invoice hb ON sp.Cod_sales = hb.Cod_sales
GROUP BY sp.Cod_sales, sp.Salary;

-- Most sold products
SELECT p.Product_ID, p.description, SUM(di.Quantity) AS TotalQuantitySold
FROM dbo.Product p
INNER JOIN dbo.Det_invoice di ON p.Product_ID = di.Product_ID
GROUP BY p.Product_ID, p.description
ORDER BY TotalQuantitySold DESC;

-- 6. Location Queries
-- List cities and states
SELECT ci.City, ci.Name AS CityName, st.State, st.Name AS StateName
FROM dbo.City ci
INNER JOIN dbo.State st ON ci.City = st.City;

-- Customers and their addresses ("Bill To" table)
SELECT b.Direction_ID, b.Customer_ID, b.Business_name, b.Location, c.Name AS CityName, s.Name AS StateName
FROM dbo.[Bill To] b
INNER JOIN dbo.City c ON b.City = c.City
INNER JOIN dbo.State s ON b.State = s.State;

-- 7. Advanced Queries
-- Top 5 customers with the highest credit
SELECT TOP 5 Customer_ID, Credit, Mail
FROM dbo.Customer
ORDER BY Credit DESC;

-- Total revenue generated by each customer
SELECT c.Customer_ID, c.Mail, SUM(di.Quantity * di.UP) AS TotalRevenue
FROM dbo.Customer c
INNER JOIN dbo.hb_invoice hb ON c.Customer_ID = hb.Customer_ID
INNER JOIN dbo.Det_invoice di ON hb.Invoice_NO = di.Invoice_NO
GROUP BY c.Customer_ID, c.Mail
ORDER BY TotalRevenue DESC;

-- Quantity of products sold by category
SELECT cat.Description AS Category, SUM(di.Quantity) AS TotalQuantitySold
FROM dbo.Category cat
INNER JOIN dbo.SubCategory sub ON cat.Category_ID = sub.Category_ID
INNER JOIN dbo.Product p ON sub.SubCategory_ID = p.SubCategory_ID
INNER JOIN dbo.Det_invoice di ON p.Product_ID = di.Product_ID
GROUP BY cat.Description
ORDER BY TotalQuantitySold DESC;
